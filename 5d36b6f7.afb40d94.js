(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{69:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return l}));var r=n(2),o=n(6),c=(n(0),n(99)),a={id:"rxjs-concepts",title:"RxJS Concepts"},s={unversionedId:"introduction/rxjs-concepts",id:"introduction/rxjs-concepts",isDocsHomePage:!1,title:"RxJS Concepts",description:"Subjects",source:"@site/docs/introduction/rxjs-concepts.md",permalink:"/rx-store/docs/next/introduction/rxjs-concepts",editUrl:"https://github.com/rx-store/rx-store/tree/master/apps/rx-store-website/docs/introduction/rxjs-concepts.md",version:"next",sidebar:"someSidebar",previous:{title:"Getting Started with Rx Store",permalink:"/rx-store/docs/next/"},next:{title:"Installation",permalink:"/rx-store/docs/next/introduction/installation"}},i=[{value:"Subjects",id:"subjects",children:[]},{value:"Observables",id:"observables",children:[]}],b={rightToc:i};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h3",{id:"subjects"},"Subjects"),Object(c.b)("p",null,Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://rxjs-dev.firebaseapp.com/guide/subject"}),"RxJS Subjects")," are simple event emitters. In ",Object(c.b)("inlineCode",{parentName:"p"},"Rx Store"),", these event emitters are the most primitive source of truth for your app."),Object(c.b)("p",null,"To see how you can model state with a stream, we'll create a counter app where we will use a subject acting as a stream of the latest state, in this case a ",Object(c.b)("inlineCode",{parentName:"p"},"count"),". We suffix the name ",Object(c.b)("inlineCode",{parentName:"p"},"count$")," with ",Object(c.b)("inlineCode",{parentName:"p"},"$")," to indicate it is a stream of ",Object(c.b)("inlineCode",{parentName:"p"},"count")," values that can be subscribed to."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'import { Subject } from "rxjs";\n\nconst store = {\n  count$: new Subject(),\n};\n\nstore.count$.subscribe(console.log);\n\nstore.count$.next(123);\n')),Object(c.b)("p",null,Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"/rx-store/docs/next/basics/subjects"}),"Read more about subjects in Rx Store"),"."),Object(c.b)("h3",{id:"observables"},"Observables"),Object(c.b)("p",null,"With observables, we will combine, process, and manipulate time declaratively. Observables can source data from subjects, as well as any external sources of data coming from outside of ",Object(c.b)("inlineCode",{parentName:"p"},"Rx Store")," including but not limited to callbacks, promises, other streams libraries, etc."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"const myClicks$ = new Subject();\nconst yourClicks$ = new Subject();\n\n// observable derived from 2 subjects:\nconst bothClicks$ = merge(myClick$, yourClick$).pipe(delay(100));\n\nconst store = {\n  myClick$,\n  yourClick$,\n  bothClick$,\n  timerA$,\n  timerB$,\n};\n")),Object(c.b)("p",null,"Observables, just like subjects, can be subscribed to, ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"/rx-store/docs/next/basics/observables"}),"read more about observables in Rx Store"),"."))}l.isMDXComponent=!0},99:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var b=o.a.createContext({}),l=function(e){var t=o.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return o.a.createElement(b.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,a=e.parentName,b=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,d=u["".concat(a,".").concat(m)]||u[m]||p[m]||c;return n?o.a.createElement(d,s(s({ref:t},b),{},{components:n})):o.a.createElement(d,s({ref:t},b))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,a=new Array(c);a[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var b=2;b<c;b++)a[b]=n[b];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);