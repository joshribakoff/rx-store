(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return l}));var a=n(2),r=n(6),c=(n(0),n(91)),s={id:"state-vs-events",title:"State vs Events"},o={unversionedId:"core/guides/state-vs-events",id:"core/guides/state-vs-events",isDocsHomePage:!1,title:"State vs Events",description:"State values",source:"@site/docs/core/guides/state-vs-events.md",permalink:"/rx-store/docs/core/guides/state-vs-events",editUrl:"https://github.com/rx-store/rx-store/tree/master/apps/rx-store-website/docs/core/guides/state-vs-events.md",sidebar:"core",previous:{title:"Nesting Effects",permalink:"/rx-store/docs/core/guides/nesting-effects"},next:{title:"Manipulating Time",permalink:"/rx-store/docs/core/guides/manipulate-time"}},i=[{value:"State values",id:"state-values",children:[]},{value:"State changes",id:"state-changes",children:[]}],u={rightToc:i};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"state-values"},"State values"),Object(c.b)("p",null,"State can be modeled as a stream, where an event is emitted onto the stream each time the state changes, where the event itself is the latest value of the state."),Object(c.b)("p",null,"One good pattern for this is to use a ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://rxjs-dev.firebaseapp.com/guide/subject#behaviorsubject"}),"behavior subject"),"."),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"BehaviorSubject"),' is a subject, which has a notion of "the current value". It stores the latest value emitted to its consumers, and whenever a new ',Object(c.b)("inlineCode",{parentName:"p"},"Observer"),' subscribes, it will immediately receive the "current value" from the BehaviorSubject.'),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"count$ = new BehaviorSubject(1);\ncount$.subscribe((value) => console.log(`subscription 1: ${value}`));\ncount$.next(2);\ncount$.subscribe((value) => console.log(`subscription 2: ${value}`));\ncount$.next(3);\n\n// subscription 1: 1\n// subscription 1: 2\n// subscription 2: 2\n// subscription 1: 3\n// subscription 2: 3\n")),Object(c.b)("h2",{id:"state-changes"},"State changes"),Object(c.b)("p",null,"State can be modeled as a stream, by having each event describe the changes to the state surfaced as an event. This is called ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://martinfowler.com/eaaDev/EventSourcing.html"}),"event sourcing"),"."),Object(c.b)("p",null,"Here is an effect that reacts to the ",Object(c.b)("inlineCode",{parentName:"p"},"counterChange$"),", each time it emits ",Object(c.b)("inlineCode",{parentName:"p"},"1")," or ",Object(c.b)("inlineCode",{parentName:"p"},"-1"),", it'll add that to an accumulator with a ",Object(c.b)("inlineCode",{parentName:"p"},"scan()")," operator, and emit the running total onto the ",Object(c.b)("inlineCode",{parentName:"p"},"count$")," sink."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"export const effect = ({sources, sinks}) =>\n  sources.counterChange$()\n    .pipe(\n      scan((acc, val) => acc + val, 0)\n      startWith(0),\n      sinks.count$()\n    )\n};\n")),Object(c.b)("p",null,"You may want to make your subject a ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://rxjs-dev.firebaseapp.com/guide/subject#replaysubject"}),"replay subject")," if you want late subscriber to receive all of the events that occurred before they subscribed."),Object(c.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(c.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(c.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"danger")),Object(c.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"Use a replay subject without passing in a maximum buffer size only after considering that it internally stores every event by default, which can easily cause memory leaks that cause your app to consume infinite amounts of memory and crash over time."))))}l.isMDXComponent=!0},91:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=r.a.createContext({}),l=function(e){var t=r.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=l(e.components);return r.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),b=l(n),d=a,m=b["".concat(s,".").concat(d)]||b[d]||p[d]||c;return n?r.a.createElement(m,o(o({ref:t},u),{},{components:n})):r.a.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,s=new Array(c);s[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var u=2;u<c;u++)s[u]=n[u];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);