(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return i}));var r=n(2),a=n(6),c=(n(0),n(93)),o={id:"counter",title:"Counter App"},s={unversionedId:"react/guides/counter",id:"react/guides/counter",isDocsHomePage:!1,title:"Counter App",description:"Create a React app",source:"@site/docs/react/guides/counter.md",permalink:"/rx-store/docs/react/guides/counter",editUrl:"https://github.com/rx-store/rx-store/tree/master/apps/rx-store-website/docs/react/guides/counter.md",sidebar:"react",previous:{title:"Usage with React",permalink:"/rx-store/docs/react/react"},next:{title:"Autocomplete App",permalink:"/rx-store/docs/react/guides/autocomplete"}},p=[{value:"Create a React app",id:"create-a-react-app",children:[]},{value:"Store Value (subjects)",id:"store-value-subjects",children:[]},{value:"Effect",id:"effect",children:[]},{value:"Create Store",id:"create-store",children:[]},{value:"Wrap App in the &lt;Manager&gt;",id:"wrap-app-in-the-manager",children:[]},{value:"Add buttons",id:"add-buttons",children:[]},{value:"Display count",id:"display-count",children:[]},{value:"Summary",id:"summary",children:[]}],u={rightToc:p};function i(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"create-a-react-app"},"Create a React app"),Object(c.b)("p",null,"We'll assume you already have a React app setup, if not ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://reactjs.org/docs/create-a-new-react-app.html"}),"create one now"),", ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"/rx-store/docs/react/react-installation"}),"and install ",Object(c.b)("inlineCode",{parentName:"a"},"Rx Store")),". We'll use ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://reactjs.org/docs/create-a-new-react-app.html#create-react-app"}),"create react app"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{}),"npx create-react-app rx-store-counter-test --template typescript\nyarn add @rx-store/react @rx-store/core rxjs\n")),Object(c.b)("h2",{id:"store-value-subjects"},"Store Value (subjects)"),Object(c.b)("p",null,"The store value is where we'll store our sources of truth. We'll use two ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://rxjs-dev.firebaseapp.com/guide/subject"}),"subjects"),", one called ",Object(c.b)("inlineCode",{parentName:"p"},"counterChange$")," which will be a stream that emits the user's intent to increment or decrement the counter by emitting a ",Object(c.b)("inlineCode",{parentName:"p"},"1")," or a ",Object(c.b)("inlineCode",{parentName:"p"},"-1")," value, and one subject called ",Object(c.b)("inlineCode",{parentName:"p"},"count$")," where we will emit the latest value of the counter each time it is calculated. We'll declare the typings here, but if you're not using typescript you can skip this step."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"interface AppStoreValue extends StoreValue {\n  counterChange$: Subject<1 | -1>;\n  count$: Subject<number>;\n}\n")),Object(c.b)("p",null,"Next, we'll implement this interface, or create the store value. For ",Object(c.b)("inlineCode",{parentName:"p"},"counterChange$")," we will use a regular ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://rxjs-dev.firebaseapp.com/guide/subject#subject"}),"subject")," and for ",Object(c.b)("inlineCode",{parentName:"p"},"count$")," we'll use a ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://rxjs-dev.firebaseapp.com/guide/subject#behaviorsubject"}),"behavior subject"),' so that it keeps track of the "latest" value and acts more stateful instead of just being an event emitter, we\'ll also give it an initial value of ',Object(c.b)("inlineCode",{parentName:"p"},"0"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"const storeValue: AppStoreValue = {\n  counterChange$: new Subject(),\n  count$: new BehaviorSubject(0),\n};\n")),Object(c.b)("h2",{id:"effect"},"Effect"),Object(c.b)("p",null,"Next, we'll add an effect for our store. This is where we put business logic and side effects. Effects are functions that are passed ",Object(c.b)("inlineCode",{parentName:"p"},"sources")," and ",Object(c.b)("inlineCode",{parentName:"p"},"sinks"),". We'll access the ",Object(c.b)("inlineCode",{parentName:"p"},"counterChange$")," source, use the ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:""}),"RxJS scan operator to put some state in our stream that sums the values"),", giving us a stream that emits the latest count. We'll then pipe this through to our ",Object(c.b)("inlineCode",{parentName:"p"},"count$")," sink. ",Object(c.b)("inlineCode",{parentName:"p"},"sources")," and ",Object(c.b)("inlineCode",{parentName:"p"},"sinks")," are just ways to react to & emit events back onto the subjects."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"const effect: Effect<AppStoreValue> = ({ sources, sinks }) =>\n  sources.counterChange$().pipe(\n    scan((acc, value) => acc + value, 0),\n    sinks.count$()\n  );\n")),Object(c.b)("p",null,Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"../../core/basic-concepts/root-effect"}),"Read more about effects in Rx Store"),"."),Object(c.b)("h2",{id:"create-store"},"Create Store"),Object(c.b)("p",null,"We'll simply pass in the ",Object(c.b)("inlineCode",{parentName:"p"},"storeValue")," (subjects) and the ",Object(c.b)("inlineCode",{parentName:"p"},"effect")," to the ",Object(c.b)("inlineCode",{parentName:"p"},"store()")," method:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"const { Manager, context } = store({ value: storeValue, effect });\n")),Object(c.b)("h2",{id:"wrap-app-in-the-manager"},"Wrap App in the ","<","Manager",">"),Object(c.b)("p",null,"Next, we'll take the ",Object(c.b)("inlineCode",{parentName:"p"},"Manager")," component returned by the ",Object(c.b)("inlineCode",{parentName:"p"},"store()")," method & wrap our app with it:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"<Manager>\n  <>your app goes here</>\n</Manager>\n")),Object(c.b)("h2",{id:"add-buttons"},"Add buttons"),Object(c.b)("p",null,"We can use the ",Object(c.b)("inlineCode",{parentName:"p"},"useStore")," hook to consume the ",Object(c.b)("inlineCode",{parentName:"p"},"storeValue")," from the ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://reactjs.org/docs/context.html"}),"React context")," that was returned by the ",Object(c.b)("inlineCode",{parentName:"p"},"store()")," method. Once we have the ",Object(c.b)("inlineCode",{parentName:"p"},"storeValue")," we can reference the subjects & emit values onto them. Here we have created 2 buttons that emit a ",Object(c.b)("inlineCode",{parentName:"p"},"1")," or a ",Object(c.b)("inlineCode",{parentName:"p"},"-1")," value onto the subject when clicked."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"const store = useStore(context);\n<button onClick={() => store.counterChange$.next(1)}>+</button>\n<button onClick={() => store.counterChange$.next(-1)}>-</button>\n")),Object(c.b)("h2",{id:"display-count"},"Display count"),Object(c.b)("p",null,"We can display the current count by accessing the subject, and subscribing to it with the ",Object(c.b)("inlineCode",{parentName:"p"},"useSubscription()")," hook provided by ",Object(c.b)("inlineCode",{parentName:"p"},"Rx Store"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"const store = useStore(context);\nconst [next] = useSubscription(store.count$);\nreturn <div>count: {next}</div>;\n")),Object(c.b)("p",null,Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"/rx-store/docs/react/api-reference/use-subscription"}),"Read more about the useSubscription hook")),Object(c.b)("h2",{id:"summary"},"Summary"),Object(c.b)("p",null,"That's all there is to creating a simple counter app in ",Object(c.b)("inlineCode",{parentName:"p"},"Rx Store"),"! Checkout the ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/rx-store/rx-store/tree/master/apps/react-example-counter"}),"example app here on GitHub"),". Here's the full code including the imports:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport './App.css';\nimport { store, useStore, useSubscription } from '@rx-store/react';\nimport { Subject, BehaviorSubject } from 'rxjs';\nimport { scan } from 'rxjs/operators';\nimport { StoreValue, Effect } from '@rx-store/core';\n\ninterface AppStoreValue extends StoreValue {\n  counterChange$: Subject<1 | -1>;\n  count$: Subject<number>;\n}\n\nconst storeValue: AppStoreValue = {\n  counterChange$: new Subject(),\n  count$: new BehaviorSubject(0),\n};\n\nconst effect: Effect<AppStoreValue> = ({ sources, sinks }) =>\n  sources.counterChange$().pipe(\n    scan((acc, value) => acc + value, 0),\n    sinks.count$()\n  );\n\nconst { Manager, context } = store({ value: storeValue, effect });\n\nfunction App() {\n  const store = useStore(context);\n  const [next] = useSubscription(store.count$);\n\n  return (\n    <div className=\"App\">\n      <Manager>\n        count: {next}\n        <button onClick={() => store.counterChange$.next(1)}>+</button>\n        <button onClick={() => store.counterChange$.next(-1)}>-</button>\n      </Manager>\n    </div>\n  );\n}\n\nexport default App;\n")))}i.isMDXComponent=!0},93:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),i=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=i(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),b=i(n),d=r,m=b["".concat(o,".").concat(d)]||b[d]||l[d]||c;return n?a.a.createElement(m,s(s({ref:t},u),{},{components:n})):a.a.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<c;u++)o[u]=n[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);